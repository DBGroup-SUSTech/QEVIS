import json
import os
import unittest

from fsm.fsm import FSM


FILE_ABS_PATH = os.path.dirname(__file__)
SERVER_PATH = os.path.join(FILE_ABS_PATH, os.pardir, os.pardir)


class TestFSM(unittest.TestCase):
    """ Test FSM """

    def get_sim_lst(self, example_name):
        example_path = os.path.join(SERVER_PATH, f'data2/{example_name}')
        test_path = os.path.join(example_path, 'output/SimulationFile.json')

        with open(test_path, 'r', encoding='utf-8') as fp:
            sim_obj = json.load(fp)
            return sim_obj['sim']

    def test_map(self):
        sim_lst = self.get_sim_lst('ExampleTest1')
        res_lst = [
            {'time_len': [0, 0, 0, 0, 0], 'start_time': 1614830670083},
            {'time_len': [0, 0, 0, 0, 0]},      # init start
            {'time_len': [0, 0, 0, 0, 0]},      # init end
            {'time_len': [104.441283, 0, 0, 0, 0]},
            {'time_len': [104.441283, 0, 0, 0, 0]},     # input start
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505, 0, 0, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505, 0, 0, 0]},     # processor start
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505,
                          1614830671921.0 - 1614830671444.0,    # advanced process data
                          3.457031, 0]},        # Sink init
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 2.720369,
                          1614830671928.0 - 1614830671444.0,
                          3.457031, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 2.720369,
                          1614830671928.0 - 1614830671444.0,
                          3.457031, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 2.720369,
                          1614830671938.0 - 3.457031 - 1614830671444.0,
                          3.457031, 0]},     # Sink @FAKE
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 2.720369,
                          1614830671938.0 - 1614830671444.0,
                          3.457031, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 2.720369,
                          1614830671938.0 - 1614830671444.0,
                          4.965361, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 2.720369,
                          1614830672024.0 - 1614830671444.0,
                          89.308673, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,     # input continue
                          1614830672058.0 - 1614830671444.0,
                          89.308673, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,
                          1614830672058.0 - 1614830671444.0,
                          89.308673, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,
                          1614830672059.0 - 1614830671444.0,
                          117.155321, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,     # processor end
                          3805945058.497089 - 3805944440.887753,
                          117.155321, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,     # spill
                          3805945058.497089 - 3805944440.887753,
                          117.155321, 0]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,
                          3805945058.497089 - 3805944440.887753,
                          117.155321, 3805945265.472738 - 3805945058.560629]},
            {'time_len': [104.441283, 3805944440.802140 - 3805943192.508505 + 6.047394,
                          3805945058.497089 - 3805944440.887753,
                          117.155321, 3805945265.472738 - 3805945058.560629]},
        ]

        fsm = FSM()
        fsm.reset()

        for item, res, idx in zip(sim_lst, res_lst, range(len(sim_lst))):
            fsm.update(item)

            print()
            print('>>>', idx)
            print(item)
            print('changed', fsm.changed_dict)
            print('buf', fsm.buf_dict)
            incr = fsm.get_incr_data(False)
            task = incr['changed'][0]
            print('task', task)

            if res:
                for k, v in res.items():
                    self.assertEqual(v, task[k])

    def test_reduce(self):
        sim_lst = self.get_sim_lst('ExampleTest2')
        res_lst = [
            {'time_len': [0, 0, 0, 0, 0], 'start_time': 1614830676032.0},
            {'time_len': [0, 0, 0, 0, 0]},
            {'time_len': [0, 0, 0, 0, 0]},
            {'time_len': [18.008542, 0, 0, 0, 0]},
            {'time_len': [18.008542, 0, 0, 0, 0]},      # shuffle start
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852, 0, 0, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852, 0, 0, 0]},      # processor start
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          1614830676676.0 - 1614830676663.0, 0.111636, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          1614830676696.0 - 0.111636 - 1614830676663.0, 0.111636, 0]},      # Sink @FAKE
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          1614830676696.0 - 1614830676663.0, 0.111636, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          1614830676697.0 - 1614830676663.0, 0.67465, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          1614830676699.0 - 1614830676663.0, 1.174657, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          3802186568.643792 - 3802186532.326955, 1.174657, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          3802186568.643792 - 3802186532.326955, 1.174657, 0]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          3802186568.643792 - 3802186532.326955, 1.174657,
                          3802186580.551184 - 3802186568.663699]},
            {'time_len': [18.008542, 3802186532.304129 - 3802185919.754852,
                          3802186568.643792 - 3802186532.326955, 1.174657,
                          3802186580.551184 - 3802186568.663699]},
        ]

        fsm = FSM()
        fsm.reset()

        for item, res, idx in zip(sim_lst, res_lst, range(len(sim_lst))):
            fsm.update(item)

            print()
            print('>>>', idx)
            print(item)
            print('changed', fsm.changed_dict)
            print('buf', fsm.buf_dict)
            incr = fsm.get_incr_data(False)
            task = incr['changed'][0]
            print('task', task)

            if res:
                for k, v in res.items():
                    self.assertEqual(v, task[k])

    def test_map_start_end(self):
        sim_lst = self.get_sim_lst('ExampleTest1')
        res_lst = [
            {'step_info': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'start_time': 1614830670083},
            {'step_info': [1614830670091.0, 1614830670091.0, 0, 0, 0, 0, 0, 0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0, 0, 0, 0, 0, 0, 0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0, 0, 0, 0, 0, 0, 0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830670196.0, 0, 0, 0, 0, 0, 0]},        # input start
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671444.0, 0, 0, 0, 0, 0, 0]},        # input end
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671444.0,
                           1614830671444.0, 1614830671444.0, 0, 0, 0, 0]},          # processor start
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671444.0,
                           1614830671444.0, 1614830671921.0, 0, 0, 0, 0]},          # sink init
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671928.0,
                           1614830671444.0, 1614830671928.0, 0, 0, 0, 0]},          # input continue
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671928.0,
                           1614830671444.0, 1614830671928.0, 0, 0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671928.0,
                           1614830671444.0, 1614830671934.543,
                           1614830671934.543, 1614830671934.543, 0, 0]},      # sink @FAKE
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671928.0,
                           1614830671444.0, 1614830671938.0,
                           1614830671934.543, 1614830671938.0, 0, 0]},        # sink take
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671928.0,
                           1614830671444.0, 1614830671938.0,
                           1614830671934.543, 1614830671938.0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830671928.0,
                           1614830671444.0, 1614830672024.0,
                           1614830671934.543, 1614830672024.0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672058.0,
                           1614830671934.543, 1614830672024.0, 0, 0]},      # input continue
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672058.0,
                           1614830671934.543, 1614830672024.0, 0, 0]},
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672059.0,
                           1614830671934.543, 1614830672059.0, 0, 0]},      # sink take
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672062.0,
                           1614830671934.543, 1614830672059.0, 0, 0]},      # processor end
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672062.0,
                           1614830671934.543, 1614830672059.0,
                           1614830672062.0, 1614830672062.0]},              # spill continue
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672062.0,
                           1614830671934.543, 1614830672059.0,
                           1614830672062.0, 1614830672269.0]},              # spill end
            {'step_info': [1614830670091.0, 1614830670196.0,
                           1614830670196.0, 1614830672058.0,
                           1614830671444.0, 1614830672062.0,
                           1614830671934.543, 1614830672059.0,
                           1614830672062.0, 1614830672269.0]},
        ]

        fsm = FSM()
        fsm.reset()

        for item, res, idx in zip(sim_lst, res_lst, range(len(sim_lst))):
            fsm.update(item)

            print()
            print('>>>', idx)
            print(item)
            print('changed', fsm.changed_dict)
            print('buf', fsm.buf_dict)
            incr = fsm.get_incr_data(False)
            task = incr['changed'][0]
            print('task', task)

            if res:
                for k, v in res.items():
                    self.assertEqual(v, task[k])

    def test_reduce_start_end(self):
        sim_lst = self.get_sim_lst('ExampleTest2')
        res_lst = [
            {'step_info': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'start_time': 1614830676032.0},
            {'step_info': [1614830676033.0, 1614830676033.0, 0, 0, 0, 0, 0, 0, 0, 0]},      # init start
            {'step_info': [1614830676033.0, 1614830676051.0, 0, 0, 0, 0, 0, 0, 0, 0]},      # init end
            {'step_info': [1614830676033.0, 1614830676051.0, 0, 0, 0, 0, 0, 0, 0, 0]},      # init take
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676051.0, 0, 0, 0, 0, 0, 0]},      # shuffle start
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0, 0, 0, 0, 0, 0, 0]},  # shuffle end
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676663.0, 0, 0, 0, 0]},  # processor start
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676676.0,
                           0, 0, 0, 0]},  # sink init
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676695.8884,
                           1614830676695.8884, 1614830676695.8884, 0, 0]},  # sink @FAKE start
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676696.0,
                           1614830676695.8884, 1614830676696.0, 0, 0]},  # sink take
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676697.0,
                           1614830676695.8884, 1614830676697.0, 0, 0]},  # sink take
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676699.0,
                           1614830676695.8884, 1614830676699.0, 0, 0]},  # sink take
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676700.0,
                           1614830676695.8884, 1614830676699.0, 0, 0]},  # processor end
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676700.0,
                           1614830676695.8884, 1614830676699.0,
                           1614830676700.0, 1614830676700.0]},  # output continuing
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676700.0,
                           1614830676695.8884, 1614830676699.0,
                           1614830676700.0, 1614830676711.0]},  # output end
            {'step_info': [1614830676033.0, 1614830676051.0,
                           1614830676051.0, 1614830676663.0,
                           1614830676663.0, 1614830676700.0,
                           1614830676695.8884, 1614830676699.0,
                           1614830676700.0, 1614830676711.0]},
        ]

        fsm = FSM()
        fsm.reset()

        for item, res, idx in zip(sim_lst, res_lst, range(len(sim_lst))):
            fsm.update(item)

            print()
            print('>>>', idx)
            print(item)
            print('changed', fsm.changed_dict)
            print('buf', fsm.buf_dict)
            incr = fsm.get_incr_data(False)
            task = incr['changed'][0]
            print('task', task)

            if res:
                for k, v in res.items():
                    self.assertEqual(v, task[k])


if __name__ == '__main__':
    unittest.main()
